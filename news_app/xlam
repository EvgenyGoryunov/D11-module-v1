<!--классическим способом ссылка работает, вторым способом, через сигнал - не работает-->
<!--    невозможно получить переменную хост + порт-->
<!--    <p><a href="http://{{ host }}{{ post.get_absolute_url }}">Перейти на статью</a></p>-->


#
#
#
#
#
#
# print('user:', x.name, ', x.email:', x.email, ', x.id:', x.id,)
# print("category:", category)
# subscribers = list(category.subscribers.all().values("email"))
# print('subscribers:', subscribers)
# print('subscribers_type:', type(subscribers))
# print('x:', dir(subscribers))
#
#
#
# print(request.POST)
# print(request.POST.get('category'))
# print("xxxx", x)
# print("cat", cat)
#
# def get(self, request, **kwargs):
#     return render(request, 'news_list.html', {context})
# return render(request, 'news_list.html', {context})
#
# def get(self, request, *args, **kwargs):
#     self.object = None
#     return super().get(request, *args, **kwargs)
#
# def post(self, request, *args, **kwargs):
#     self.object = None
#     return super().post(request, *args, **kwargs)
#
#
#
# def add_subscribe(request, **kwargs):
#     GET = request.GET
#     # pk = kwargs.get('pk_pk')
#     # id = kwargs.get('post.id')
#     pk = request.GET.get('pk_pk')
#     # qwerty = request.GET.get("id", "pk")
#     # print("GET:", dir(request))
#     print("GET:", GET)
#     print("ПиКей:", pk)
#     # print("IdIdId:", id)
#     # print("qwerty:", qwerty)
#
#     # print(request.pk)
#     # print("ЮЗЕР:", request.user)
#     Category.objects.get(pk=Post.objects.get(pk=pk).category.id).subscribers.add(request.user)
#     # Category.objects.get(pk=Post.objects.get(pk=id).category.id).subscribers.add(request.user)
#     return redirect('/news/')


# def add_subscribe(request, **kwargs):
#     pk = request.GET.get('pk')
#     print(pk)
#     Category.objects.get(pk=Post.objects.get(pk=pk).category.id).subscribers.add(request.user)
#     return redirect('/news/')

#
# def subscribe():
#     return redirect('/news/')


# def get_object(self, **kwargs):  # (4)
# id = self.kwargs.get('pk')
# print("id поста:", id)
# print("id категории:", Post.objects.get(pk=id).category.id)
# print("Название категории:", Post.objects.get(pk=id).category)
# return Post.objects.get(pk=id).category.id
# qaz=Post.objects.get(pk=id)
# return id
# return Post.objects.get(pk=id)

# print("id поста:", get_object)

# def qaz(self, get_object):
#     print("Функция гет гет:", Post.objects.get(pk=get_object).category)
#     return Post.objects.get(pk=get_object).category.id


# print(Category.objects.get(pk=3).name)

# print(Category.objects.filter(pk=id).values("id", "name", "subscribers"))
# print(Category.objects.filter(name='IT').values("subscribers"))
# print(kp=id)
# print("Name:", self.request.user)
# print("User ID:", self.request.user.id)
# print("User Test:", Post.objects.all())
# print(Category.name.id)
# print(Category.name)
# print(Category.objects.get(pk=1).values('name'))

# print('pk:', id)
# print(type(id))
# print(id)

# print(Category.objects.filter(pk=2).values("id", "name", "subscribers__username"))

# print(Post.objects.get(pk=id).values("category"))
# print(Post.objects.get(pk=id).category.id)

# print(Category.objects.filter(pk=Post.objects.get(pk=id).category.id).values("id", "name", "subscribers__username"))

# print(Category.objects.filter(pk=Post.objects.get(pk=id).category.id).values("subscribers__username"))
# print(self.request.user)

# print(context['is_not_subscribe'])
# print(context['is_subscribe'])



# print('pole_spisok3:', pole_spisok3)
# print('Список статей на данную тему:')
# pole_spisok4 = f'{qaz}, http://127.0.0.1:8000/news/{wsx}'
# print('Список статей на данную тему:', pole_spisok4)

# print(request)
# print(dir(request))
# print(request.POST['pole_test'])
#     print(qwer.get('title'), 'http://127.0.0.1:8000/news/', qwer.get('pk'), )
# получаем список адресов в зависимости от pk=pole_test
# # pole_spisok2 = list(Category.objects.filter(pk=pole_test).values('subscribers__email'))
# в данном цикле мы можем отправлять каждому пользователю или подписчику под данную категорию нужный список
# статей, следующий этап сформировать список статей в шаблоне html
# for qwe in pole_spisok2:
#     print(qwe.get('subscribers__email',))

# return redirect ('test')
# pole_spisok2 = list(Category.objects.filter(pk=pole_test).values('subscribers__username', 'subscribers__email'))
# print(type(pole_spisok1))
# выывести список подписоты одной статьи (их мыло)

# category = Category.objects.get(pk=Post.objects.get(pk=instance.pk).category.pk)
# subscribers = category.subscribers.all()

# print('Сообщение:', pole_test)

# subscribers = Category.objects.filter(pk=cat_id).values('subscribers__email')
# subscribers = Category.objects.all().values('subscribers', 'subscribers__username', 'name', 'subscribers__email')
# category = Category.objects.get(pk=Post.objects.get(pk=Post.pk).category.pk)
# subscribers = category.subscribers.all()

# for subscriber in subscribers:
#     print('Адреса рассылки:', subscriber.email)

# for qaz in subscribers:
#     # print("имя:", qaz)
#     print("только почта:", qaz.email)
#     # print("ИД:", qaz.id)

# print(subscribers)
# subscribers = Category.objects.all()

# for qwe in subscribers:
#     print(qwe)
# categorys = Category.objects.all().values('subscribers', 'subscribers__username', 'name', 'subscribers__email')
# return render(request, 'test_test.html', {
#     'subs': categorys  # чтоб получить все значения из БД будем проходиться циклом в html страничке
# })
